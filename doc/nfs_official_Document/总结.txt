# client-identifier.rst
详细介绍了 NFSv4 协议中客户端标识符的作用、设计和使用方法。

主要内容：
NFSv4 客户端标识符的作用：
用于在系统重启期间维护文件打开和锁定状态。
每个客户端都有一个唯一的标识符和主体（principal）。
NFSv4 协议的租约机制：
服务器为每个客户端创建租约，用于管理文件锁和资源。
客户端需要定期续约，未续约的租约会被服务器清理。
客户端标识符的组成：
包括 co_ownerid（固定字符串）和 boot verifier（64 位验证器）。
标识符需要持久性、全局唯一性，并避免泄露私密信息。
保护租约状态：
讨论了租约和锁定状态可能被“窃取”的风险（如租约窃取和锁窃取）。
强调标识符和主体的稳定性对状态恢复的重要性。
选择合适的客户端标识符：
Linux 提供了两种机制来增强标识符的唯一性：
nfs.nfs4_unique_id 模块参数。
/sys/fs/nfs/net/nfs_client/identifier 虚拟文件。
安全性考虑：
强烈建议使用 Kerberos 等加密安全机制来管理租约。
讨论了使用 Kerberos 和 AUTH_SYS 的优缺点。
其他注意事项：
客户端可以在服务器间迁移租约状态，支持数据迁移。
参考文献：提到了相关的手册页（如 nfs(5) 和 kerberos(7)）以及 NFSv4 的 RFC 规范（RFC 7530 和 RFC 8881）。


# index.rst
这份文档（index.rst）是一个 NFS（Network File System）相关文档的目录文件，主要内容如下：

# exporting.rst
该文档详细描述了如何使文件系统支持导出，包括文件句柄片段的生成与解析、Dcache 的特殊处理、文件系统的实现要求以及导出操作的标志设置。
这些机制确保文件系统能够通过远程协议（如 NFS）稳定地访问和操作文件。

# nfs41-server.rst:
NFSv4.1 协议的实现情况

# **knfsd-stats.rst**:
内核 NFS 服务器提供给用户空间的统计信息的格式和语义，
主要通过伪文件系统 /proc/fs/nfsd 和/proc/fs/nfsd/pool_stats 文件提供
这些统计信息可用于分析 NFS 服务器的性能瓶颈，例如线程池配置是否合理、网络流量对服务器的影响等。

# pnfs.rst:
该文档详细描述了 pNFS 中的引用计数机制及其实现，包括布局头部、设备 ID 缓存、数据服务器缓存和布局段的引用管理。
此外，还介绍了 pNFS 的布局驱动及其代码位置。文档强调了引用计数在管理复杂关系中的重要性，并提到部分功能（如块布局设置）尚待完善。

# reexport.rst
帮助用户了解在 NFS 上重新导出文件系统的可行性、限制和潜在问题。
它为系统管理员提供了技术细节和注意事项，以便在使用重新导出功能时做出明智的决策，并避免常见的配置错误或功能失效。

# rpc-cache.rst
 SunRPC 层的缓存机制，包括缓存的用途、创建、使用和与用户空间的交互方式。
 它为 NFS 认证和其他 RPC 功能提供了灵活的缓存支持，解决了多种场景下的性能和功能需求，同时支持用户空间的动态填充和管理

# rpc-server-gss.rst
内核 RPC 服务器中 rpcsec_gss 的认证机制，重点介绍了传统和新型上行调用机制的实现及其优缺点。
新机制通过 gss-proxy 消除了传统机制的大小限制，提升了灵活性和性能，同时提供了向后兼容的切换方法。
